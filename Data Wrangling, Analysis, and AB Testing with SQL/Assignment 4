-- How many new users are added each day?
SELECT DATE(created_at) AS day,
  COUNT(*) AS users
FROM dsv1069.users
GROUP BY day
ORDER BY day ASC

-- Without worrying about deleted user or merged users, count the number of users added each day.
SELECT DATE(created_at) AS day,
  COUNT(id) as num_users
FROM dsv1069.users
GROUP BY day
ORDER BY day ASC

-- Count the number of users deleted each day. Then count the number of users removed due to merging in a similar way.
SELECT DATE(created_at) AS day,
  COUNT(*) AS users
FROM dsv1069.users
WHERE deleted_at IS NOT NULL
GROUP BY day

-- Use the pieces youâ€™ve built as subtables and create a table that has a column for the date, the number of users created, 
-- the number of users deleted and the number of users merged that day.
SELECT new.day,
  new.new_added_users,
  COALESCE(deleted.deleted_users, 0) AS deleted_users,
  COALESCE(merged.merged_users, 0) AS merged_users,
  (new.new_added_users - COALESCE(deleted.deleted_users, 0) - COALESCE(merged.merged_users, 0)) 
    AS net_added_users
FROM (SELECT DATE(created_at) AS day,
    COUNT(*) AS new_added_users
  FROM dsv1069.users
  GROUP BY day) new
LEFT JOIN 
  (SELECT DATE(created_at) AS day,
    COUNT(*) AS deleted_users
  FROM dsv1069.users
  WHERE deleted_at IS NOT NULL
  GROUP BY day) deleted
  ON deleted.day = new.day
LEFT JOIN 
  (SELECT DATE(merged_at) AS day,
    COUNT(*) AS merged_users
  FROM dsv1069.users
  WHERE id <> parent_user_id
  AND parent_user_id IS NOT NULL
  GROUP BY day) merged
ON merged.day = new.day
